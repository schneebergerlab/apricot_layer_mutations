## Step 1: Make reference genome index
indir=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/assemblies/hifi_assemblies/
cd $indir
#gffread cur.pasa_out.gff -T > cur.pasa_out.gtf # Using the PASA out GFF for now, will need to udpate it when the final annotation is ready
gffread cur.pasa_out.sort.protein_coding.3utr.gff3 -T > cur.pasa_out.sort.protein_coding.3utr.gtf

# can edit the gff file manually to add UTRs
/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/scripts/python/add_3UTR_to_gff_files.py

# Changing cellranger to newer version (04.08.2024)
cellranger=/srv/netscratch/dep_mercier/grp_schneeberger/software/cellranger-7.1.0/bin/cellranger
# Rerunning with older version (08.08.2024)
cellranger=/srv/netscratch/dep_mercier/grp_schneeberger/software/cellranger-5.0.0/bin/cellranger
# Cellranger index
nohup $cellranger mkref --genome=cur --fasta cur.genome.v1.fasta --genes=cur.pasa_out.sort.protein_coding.3utr.gtf --nthreads=20 &

## Step 2: Perform barcode-correction and get cell count using cellranger count
indir=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/reads/leaf_scrna/bigdata/
refdir=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/assemblies/hifi_assemblies/cur/
cwd=/srv/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scrna/bigdata/get_cells/
# Added parameter in the ./cellranger-7.1.0/lib/bin/parameters.toml to limit intron length which doing alignment
cd $cwd
samples=( 'WT_1' 'WT_19' 'MUT_11_1' 'MUT_15' )
for sample in ${samples[@]}; do
#  cd ${indir}/${sample}
#  for f in $(ls *.fastq.gz); do
#    echo $f
#    mv $f  $(echo $f | sed -r 's/_H.{8}_/_/')
#  done
  cd $cwd
  mkdir -p ${sample}_cr5
  cd ${sample}_cr5
  sample_list=$(ls ${indir}/${sample}/*fastq.gz  | sed 's/^.*\///g' |sed 's/_S.*$//g' | sort -u | tr '\n' ',' | sed 's/,$//g')
  echo $sample_list

  bsub -q multicore20 -R "span[hosts=1] rusage[mem=10000]" -M 10000 -oo ${sample}.log -eo ${sample}.err "
    $cellranger count --id=$sample \
      --fastqs=${indir}/${sample} \
      --transcriptome=$refdir \
      --sample=$sample_list \
      --expect-cells 3500 \
      --include-introns \
      --jobmode=lsf --maxjobs=10000 --jobinterval=1 --mempercore=10 \
      2>&1  > cellranger.log
  "
done

# <editor-fold desc="Obsolete code used for manual analysis of scRNA data">

INDIR=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scrna/bigdata/get_cells/
CWD=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scrna/bigdata/barcodes/
SAMPLES=( 'WT_1' 'WT_19' 'MUT_11_1' 'MUT_15' )
# Split BAM generated by cellranger to select all BC with high number of reads
cd $CWD
for sample in ${SAMPLES[@]}; do
    cd $CWD
    mkdir $sample; cd $sample
    bsub -q multicore40 -n 10 -R "span[hosts=1] rusage[mem=10000]" -M 10000 -oo ${sample}.log -eo ${sample}.err "
        samtools sort -@ 10 -t CB -O BAM ${INDIR}/${sample}/${sample}/outs/possorted_genome_bam.bam > ${sample}_CB_sort.bam
        hometools splitbam ${sample}_CB_sort.bam CB
    "
done

# READ THE INDIVIDUAL BAM FILES AND COUNT HOW MANY UMI ARE THERE FOR EACH BC. SELECT A LOGICAL CUTOFF FOR MINIMUM NUMBER OF UMI and mapping ratio.
/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/scripts/python/scrna_analysis.py
# Number of barcodes selected
# {'WT_1': 2566, 'WT_19': 2813, 'MUT_11_1': 2965, 'MUT_15': 3047}

## Maybe can be done later
cd /srv/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scrna/bigdata/get_cells3/WT_1_reanalyse
cellranger reanalyze --id=WT_1_reanalyse \
  --matrix=../WT_1/WT_1/outs/filtered_feature_bc_matrix.h5 \
  --params=params.csv \
  --localcores=60 \
  --localmem=300



#############################################################
## Step 2: Align bulk leaf reads to cur genome
#############################################################
# STAR Index
cd $indir
nohup STAR  --runThreadN 40 \
      --runMode genomeGenerate \
      --genomeSAindexNbases 12 \
      --genomeDir cur.genome.v1.fasta.star_index \
      --genomeFastaFiles cur.genome.v1.fasta \
      --sjdbGTFfile cur.pasa_out.gtf > np.star_index &

CWD='/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scrna/rp_leaf_bulk_illumina/'
ref_idx='/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/assemblies/hifi_assemblies/cur.genome.v1.fasta.star_index'
cd $CWD
STAR --runThreadN 30 \
    --genomeDir $ref_idx \
    --readFilesIn /netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/reads/leaf_illumina/rojo_passion_rna/leaf_bulk/4031_D_run576_GCTAACTC_S32_L003_R1_001.fastq.gz,/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/reads/leaf_illumina/rojo_passion_rna/leaf_bulk/4031_D_run576_GCTAACTC_S32_L004_R1_001.fastq.gz \
    --readFilesCommand zcat \
    --outStd BAM_SortedByCoordinate \
    --outSAMtype BAM SortedByCoordinate \
    --outSAMunmapped Within \
    --outSAMprimaryFlag AllBestScore \
    --outFileNamePrefix rp_leaf \
    --quantMode GeneCounts \
    --twopassMode Basic \
    --alignIntronMax 20000 \
    --outFilterMismatchNmax 5 > rp_leaf.sorted.bam

# </editor-fold>


# <editor-fold desc="Separate cellranger output BAM to clusters and get check for SMs">
indir=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scrna/bigdata/get_cells/
cwd=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scrna/bigdata/scrna_clusters/
refcur=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/assemblies/hifi_assemblies/cur.genome.v1.fasta
muts=/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scdna/bigdata/variant_calling/all_sm_in_all_samples.manually_selected.cleaned.regions

for s in WT_1 WT_19 MUT_11_1 MUT_15; do
    cd $cwd
    cd $s
    bsub -q multicore40 -n 40 -R "span[hosts=1] rusage[mem=50000]" -M 60000 -oo ${s}.log -eo ${s}.err "
#        samtools view -@ 40 -F 1024 -O BAM ${indir}/${s}/${s}/outs/possorted_genome_bam.bam \
#        | samtools sort -@ 40 -t CB -O BAM -o ${s}.dedup.cb_sorted.bam -
#        for i in 1 2 3 4 5 6 7 8 9 10 11 12; do
#            samtools view -@ 40 -D CB:clstrs_\${i}_bcs.txt -O BAM ${s}.dedup.cb_sorted.bam \
#            | samtools sort -@ 40 - \
#            > clstrs_\${i}_bcs.bam
#            samtools index -@ 40 clstrs_\${i}_bcs.bam
#            /srv/netscratch/dep_mercier/grp_schneeberger/software/anaconda3_2021/envs/mgpy3.8/bin/hometools pbamrc -n 1 -b 0 -q 0 -w 0 -I -f $refcur -l $muts clstrs_\${i}_bcs.bam clstrs_\${i}.rna.rc.txt &
#        done
#        wait
        samtools sort -@ 40 -O BAM -o ${s}.dedup.pos_sorted.bam ${s}.dedup.cb_sorted.bam
    "
done

# </editor-fold>


# <editor-fold desc="Get upregulated and downregulated genes in cluster">
cwd='/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/scrna/bigdata/sahu_analysis/'
cd cwd
hometools xls2csv cluster_markers_res0.5.xlsx cluster_markers_res0.5.tsv -s all -n

tail +2 cluster_markers_res0.5.tsv \
| awk '{if($6 <0.05 && $3>0.5) {print $0}}' \
> cluster_markers_res0.5.upregulated.tsv

tail +2 cluster_markers_res0.5.tsv \
| awk '{if($6 <0.05 && $3<-0.5) {print $0}}' \
> cluster_markers_res0.5.downregulated.tsv

for c in 0 7 9; do
    grep 'cluster '${c} cluster_markers_res0.5.upregulated.tsv | cut -f1 > cluster${c}_upregulated.txt
    grep -Ff cluster${c}_upregulated.txt /netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/results/structurome/structural_orthologs_cur_athal.geneids.tsv |
    cut -f 2 > cluster${c}_upregulated.ortho.txt
done

# </editor-fold>