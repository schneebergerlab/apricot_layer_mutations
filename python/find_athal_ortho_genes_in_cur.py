import sys
sys.path.insert(0, '/srv/biodata/dep_mercier/grp_schneeberger/software/hometools')
from myUsefulFunctions import readfasta, readblast

def filter_orthologs():
    """
        Get Currot genes that are orthologous to the cell-type specific marker genes from AThal.
        geneids: file contatining list of genes whose orthologs are to be selected
        orthogroups: path to Orthogroups.txt file generated by OrthoFinder
    """
    from collections import deque, defaultdict
    import pandas as pd
    import re
    geneidfin = "/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/annotations/athal_cell_specific_genes.csv" # Cell-type gene ids identified by Kristin
    orthogroups = "/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/annotations/orthology/cur_athal/OrthoFinder/Results_Sep29/Orthogroups/Orthogroups.txt"
    genes = pd.read_table(geneidfin, header=None, sep=',')
    genes.columns = 'cell_type athal_gene'.split()
    genesids = set(genes.athal_gene)
    # geneids = deque()
    # with open(geneidfin, 'r') as fin:
    #     for l in fin:
    #         l = l.strip().split(',')
    #         genes[l[0]][l[1]] = deque()
    #         geneids.append(l[1])
    ortho = defaultdict(deque)
    for l in open(orthogroups, 'r'):
        for gene in genesids:
            if len(re.findall(gene+'.', l)) > 0:
                l2 = l.strip().split()
                for g in l2[1:]:
                    if g[:2] != 'AT':
                        ortho[gene].append(g.replace('mRNA', 'Gene').rsplit('.', maxsplit=1)[0])
    for k, v in ortho.items():
        ortho[k] = ','.join(set(v))
    ortho = pd.DataFrame({'athal_gene': ortho.keys(), 'cur_genes': ortho.values()})
    outgene = genes.merge(ortho, how='outer', on=['athal_gene'])
    outgene.to_csv('/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/annotations/orthology/ortho_marker_genes.txt', header=True, sep='\t', index=False)
    return
# END


def get_cluster_marker_orthologs():
    """
    Read the marker genes as reported in https://academic.oup.com/plcell/article/33/3/511/6067477?login=true and find
    the sequence orthologs in currot genome
    """
    import pandas as pd
    from collections import deque, defaultdict
    import re
    orthogroups = "/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/annotations/orthology/cur_athal/OrthoFinder/Results_Sep29/Orthogroups/Orthogroups.txt"
    geneidfin = '/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/annotations/leaf_cell_type_markers/tpc.00751.2020-s03.csv'

    genesdf = pd.read_table(geneidfin, skiprows=2)
    genesdf.drop_duplicates(keep=False, inplace=True)

    genes = deque()
    cell = ''
    for row in genesdf.itertuples(index=False):
        if row[0][:2] == 'AT':
            genes.append([cell, row[0]])
        else:
            cell = row[0]
    genes = pd.DataFrame(genes)
    genes.columns = 'cell_type athal_gene'.split()
    genesids = set(genes.athal_gene)
    ortho = defaultdict(deque)
    for l in open(orthogroups, 'r'):
        for gene in genesids:
            if len(re.findall(gene+'.', l)) > 0:
                l2 = l.strip().split()
                for g in l2[1:]:
                    if g[:2] != 'AT':
                        ortho[gene].append(g.replace('mRNA', 'Gene').rsplit('.', maxsplit=1)[0])
    for k, v in ortho.items():
        ortho[k] = list(set(v))
    ortho = pd.DataFrame({'athal_gene': ortho.keys(), 'cur_genes': ortho.values()})
    outgene = genes.merge(ortho, how='outer', on=['athal_gene'])
    outgene = outgene.explode('cur_genes')
    outgene.to_csv('/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/annotations/leaf_cell_type_markers//ortho_marker_genes.txt', header=True, sep='\t', index=False)
    return
# END


def select_pdb_from_af2():
    """
    For each mRNA, select the highest scoring PDB (ranked_0) and save into a .tar file
    """
    import tarfile
    from tqdm import tqdm
    import os
    cwd = '/netscratch/dep_mercier/grp_schneeberger/projects/apricot_leaf/data/protein_structure/currot_pdbs/'
    with tarfile.open(f'{cwd}/selected_pdbs.tar', "w") as fout:
        mrnas = os.listdir(f'{cwd}/pdbs/')
        for mrna in tqdm(mrnas):
            try:
                fout.add(f'{cwd}/pdbs/{mrna}/ranked_0.pdb', arcname=f'{mrna}.pdb') # ranked 0 corresponds to the PDB with the highest score.
            except FileNotFoundError:
                pass
    return
# END

